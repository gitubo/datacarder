#pragma once

#include <iostream>
#include <luajit-2.1/lua.hpp>
#include "ChainNode.hpp"

namespace opencmd {

    struct MessageWrapper {
        nlohmann::ordered_json json;
        BitStream bitStream;
    };

    int lua_get_json_value(lua_State* L) {
        MessageWrapper* wrapper = static_cast<MessageWrapper*>(luaL_checkudata(L, 1, "MessageWrapper"));
        const char* key = luaL_checkstring(L, 2);
        if (wrapper->json.contains(key)) {
            lua_pushstring(L, wrapper->json[key].get<std::string>().c_str());
        } else {
            lua_pushnil(L);
        }

        return 1;
    }

    class NodeFunctionLua : public ChainNode {
    private:
        std::string luaCode;
        mutable lua_State *L;
        int bitstream_to_json_func_ref;
        int json_to_bitstream_func_ref;

        void initializeLuaJIT() {
            L = luaL_newstate();
            luaL_openlibs(L);
            luaJIT_setmode(L, 0, LUAJIT_MODE_ENGINE | LUAJIT_MODE_ON); // Abilita il JIT
        }

        void json_to_lua(lua_State* L, const nlohmann::ordered_json& j) const {
            if (j.is_object()) {
                lua_newtable(L);
                for (auto& [key, value] : j.items()) {
                    lua_pushstring(L, key.c_str());
                    json_to_lua(L, value);
                    lua_settable(L, -3);
                }
            } else if (j.is_array()) {
                lua_newtable(L);
                int index = 1;
                for (auto& value : j) {
                    json_to_lua(L, value);
                    lua_rawseti(L, -2, index++);
                }
            } else if (j.is_string()) {
                lua_pushstring(L, j.get<std::string>().c_str());
            } else if (j.is_number_integer()) {
                lua_pushinteger(L, j.get<int>());
            } else if (j.is_number_float()) {
                lua_pushnumber(L, j.get<double>());
            } else if (j.is_boolean()) {
                lua_pushboolean(L, j.get<bool>());
            } else {
                lua_pushnil(L);
            }
        }

        nlohmann::ordered_json lua_to_json(lua_State* L, int index) const {
            nlohmann::ordered_json j;

            if (lua_istable(L, index)) {
                lua_pushnil(L); // Inizializza l'iterazione

                while (lua_next(L, index) != 0) {
                    // Assicurati che la chiave sia una stringa
                    if (!lua_isstring(L, -2)) {
                        lua_pop(L, 2); // Scarta la chiave e il valore
                        continue;
                    }

                    std::string key = lua_tostring(L, -2);

                    if (lua_isstring(L, -1))
                        j[key] = lua_tostring(L, -1);
                    else if (lua_isboolean(L, -1))
                        j[key] = lua_toboolean(L, -1);
                    else if (lua_isnumber(L, -1))
                        j[key] = lua_tonumber(L, -1);
                    else if (lua_istable(L, -1))
                        j[key] = lua_to_json(L, -1); // âœ… Usa -1 invece di lua_gettop(L)

                    lua_pop(L, 1); // Rimuove il valore dallo stack, la chiave rimane per il prossimo ciclo
                }
            }
            return j;
        }


    public:
        NodeFunctionLua() : ChainNode(), luaCode(""), L(nullptr) {}

        ~NodeFunctionLua() {
            if (L) {
                luaL_unref(L, LUA_REGISTRYINDEX, bitstream_to_json_func_ref);
                luaL_unref(L, LUA_REGISTRYINDEX, json_to_bitstream_func_ref);
                lua_close(L);
            }
        }

        void addAttribute(const std::string& key, const ChainNodeAttribute& attribute) override {
            ChainNode::addAttribute(key, attribute);
            if (key == "code" && attribute.isString()) {
                luaCode = attribute.getString().value();
                initializeLuaJIT();
                
                if (luaL_dostring(L, luaCode.c_str()) != LUA_OK) {
                    Logger::getInstance().error("Error loading Lua code: " + std::string(lua_tostring(L, -1)));
                    lua_close(L);
                    return;
                }

                lua_getglobal(L, "bitstream_to_json");
                if (!lua_isfunction(L, -1)) {
                    Logger::getInstance().error("Missing function: bitstream_to_json");
                    lua_close(L);
                    return;
                }
                luaJIT_setmode(L, -1, LUAJIT_MODE_FUNC | LUAJIT_MODE_ON);
                bitstream_to_json_func_ref = luaL_ref(L, LUA_REGISTRYINDEX);

                lua_getglobal(L, "json_to_bitstream");
                if (!lua_isfunction(L, -1)) {
                    Logger::getInstance().error("Missing function: json_to_bitstream");
                    lua_close(L);
                    return;
                }
                luaJIT_setmode(L, -1, LUAJIT_MODE_FUNC | LUAJIT_MODE_ON);
                json_to_bitstream_func_ref = luaL_ref(L, LUA_REGISTRYINDEX);
            }
        }

        int bitstream_to_json(BitStream& bitStream, nlohmann::ordered_json& outputJson) const override {
            if(!outputJson.is_null() && outputJson.is_object()){
                
                lua_rawgeti(L, LUA_REGISTRYINDEX, bitstream_to_json_func_ref);
                
                lua_pushstring(L, this->getName().c_str());
                lua_pushstring(L, this->getParentName().c_str());
                lua_pushstring(L, "1010101010");
                json_to_lua(L, outputJson.unflatten());

                if (lua_pcall(L, 4, 1, 0) != LUA_OK) {
                    Logger::getInstance().error("Error executing Lua function: " + std::string(lua_tostring(L, -1)));
                    return 101;
                }

                std::cout << "AAA" << std::endl;
                outputJson = lua_to_json(L, lua_gettop(L)).flatten();
                std::cout << outputJson.dump() << std::endl;
                lua_pop(L, 1);
            }
            if (auto nextNode = getNextNode()) {
                nextNode->bitstream_to_json(bitStream, outputJson);
            }
            return 0;
        }

        int json_to_bitstream(nlohmann::ordered_json& inputJson, BitStream& bitStream) override {
            if(!inputJson.is_null() && inputJson.is_object()){
                lua_rawgeti(L, LUA_REGISTRYINDEX, json_to_bitstream_func_ref);
                lua_pushstring(L, this->getName().c_str());
                lua_pushstring(L, this->getParentName().c_str());
                lua_pushstring(L, "1010101010");
                json_to_lua(L, inputJson.unflatten());
                
                if (lua_pcall(L, 4, 1, 0) != LUA_OK) {
                    Logger::getInstance().error("Error executing Lua function: " + std::string(lua_tostring(L, -1)));
                    return 101;
                }
                inputJson = lua_to_json(L, lua_gettop(L)).flatten();
                lua_pop(L, 1);
            }
            if (auto nextNode = getNextNode()) {
                nextNode->json_to_bitstream(inputJson, bitStream);
            }
            return 0;
        }
    };
}
